@use '../globals' as *;
@use './links' as *;

@mixin _FocusedFrame(
	$frameOffset,
	$borderRadius,
	$borderColor: $var--theme-color-primary,
	$borderWidth: prem(2),
	$borderStyle: solid
) {
	@include keyboardFocus-selector {
		&::after {
			content: '';
			position: absolute;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
			margin: $frameOffset;
			border: $borderWidth $borderStyle $borderColor;
			border-radius: $borderRadius;
		}
	}
}

@mixin ButtonStyle($frameOffset: prem(-4), $color: $var--theme-color-primary--text) {
	@include LinkStyle_Reset(true);
	--Button--border: 0px;
	--Button--height: #{prem(56)};

	$borderRadius: prem(3);
	// @include buttonReset(); // <-- This is NOT needed as `-basics` has global button reset

	// normalize links
	white-space: nowrap;
	vertical-align: middle;

	color: $color;
	background-color: $var--theme-color-primary;
	display: inline-block;
	line-height: calc(var(--Button--height) - 2 * var(--Button--border));
	margin-right: between_phone_netbook(16, 32);
	margin-bottom: prem(16);
	text-align: center;
	border-radius: $borderRadius;
	position: relative;
	transition: all 200ms ease-in;
	transition-property: border-color, background-color, color, text-shadow, box-shadow;
	padding: 0 between_phone_netbook(24, 32);
	width: max-content;
	max-width: 100%;
	min-width: between_phone_netbook(80, 128);
	font-size: prem($font-btn-size);
	font-weight: $font-weight--bold;

	@media #{$mq-wide} {
		min-width: 128px;
		padding-left: 32px;
		padding-right: 32px;
		margin-right: 32px;
	}

	@include hoverActiveKeyboardFocus-selector {
		outline: 0;
		text-decoration: none;
		// box-shadow: 0 prem(12) prem(16) rgba(black, 0.09);
		box-shadow: 0 prem(8) prem(16) rgba(black, 0.15);
		color: $color;
	}
	&:active,
	&[aria-pressed='true'] {
		text-decoration: none;
		background-color: $var--theme-color-primary--dark;
		color: $color-suld-0;
	}
	@include _FocusedFrame($frameOffset, $borderRadius);

	&[disabled],
	&[aria-disabled='true'] {
		box-shadow: none;
		background-color: $var--theme-color-primary;
		opacity: 0.3;
	}

	&--wide {
		min-width: between_tablet_netbook(275, 312);

		@media #{$mq-phone_phablet} {
			width: 100%;
		}
		@media #{$mq-wide} {
			min-width: 312px;
		}
	}
	&--small {
		--Button--height: #{prem(40)};
		padding-left: between_phone_netbook(16, 24);
		padding-right: between_phone_netbook(16, 24);

		@media #{$mq-wide} {
			padding-left: 24px;
			padding-right: 24px;
		}
	}
	&--small#{&}--wide {
		@include WARNING__('Variants --small and --wide do NOT mix.');
	}
}

:root {
	--ButtonTertiary--color: _inherit;
	--ButtonTertiary--dashColor: #{$var--theme-color-primary--safeish};
	--ButtonTertiary--dashWidth: #{$var--space-2};
	--ButtonTertiary--hover--dashWidth: #{$var--space-4};
	--ButtonTertiary--dashSpace: #{$var--space-2};
	--ButtonTertiary--small--dashSpace: #{$var--space-1};
	--ButtonTertiary--dashHeight: 2px;
}
$var--ButtonTertiary--color: var(--ButtonTertiary--color);
$var--ButtonTertiary--dashColor: var(--ButtonTertiary--dashColor);
$var--ButtonTertiary--dashWidth: var(--ButtonTertiary--dashWidth);
$var--ButtonTertiary--hover--dashWidth: var(--ButtonTertiary--hover--dashWidth);
$var--ButtonTertiary--dashSpace: var(--ButtonTertiary--dashSpace);
$var--ButtonTertiary--small--dashSpace: var(--ButtonTertiary--small--dashSpace);
$var--ButtonTertiary--dashHeight: var(--ButtonTertiary--dashHeight);

@mixin ButtonTertiaryStyle($mode: normal, $static: false) {
	$borderRadius: prem(8);

	@include LinkStyle_Reset(true);

	color: $var--ButtonTertiary--color;
	position: relative;
	display: inline-block;
	width: max-content;
	max-width: 100%;
	vertical-align: middle;
	font: $var--font-base;
	padding-left: calc(
		#{$var--ButtonTertiary--dashSpace} + #{$var--ButtonTertiary--dashWidth}
	);
	padding-right: calc(
		#{$var--ButtonTertiary--hover--dashWidth} - #{$var--ButtonTertiary--dashWidth}
	);
	margin-right: between_phone_netbook(16, 24);
	margin-bottom: $var--space-1;
	font-weight: 700;
	transition: all 100ms ease-in;

	@include media($mq-wide) {
		margin-right: 24px;
	}

	&::before {
		content: '';
		position: absolute;
		left: 0;
		top: 50%;
		width: $var--ButtonTertiary--dashWidth;
		height: $var--ButtonTertiary--dashHeight;
		display: inline-block;
		vertical-align: middle;
		background-color: currentColor;
		color: $var--ButtonTertiary--dashColor;
		transform: translateY(-50%);
		transition: inherit;
	}

	@if not $static {
		@if $mode == normal {
			&:active,
			&[aria-pressed='true'] {
				--ButtonTertiary--dashColor: _inherit;
				--ButtonTertiary--dashHeight: #{prem(6)};
			}
		}

		@include hoverActiveKeyboardFocus-selector {
			padding-left: calc(
				#{$var--ButtonTertiary--dashSpace} + #{$var--ButtonTertiary--hover--dashWidth}
			);
			padding-right: prem(0);
			color: $var--ButtonTertiary--color;
			outline: 0;

			&::before {
				width: $var--ButtonTertiary--hover--dashWidth;
			}
		}
		&:active::before {
			width: $var--ButtonTertiary--dashWidth;
		}

		@include _FocusedFrame(
			prem(-13) prem(-16),
			prem(8),
			$var--ButtonTertiary--dashColor,
			prem(1),
			dotted
		);

		@if $mode == normal or $mode == disabledOnly {
			&[disabled],
			&[aria-disabled='true'] {
				--ButtonTertiary--dashColor: currentColor;
				opacity: 0.5;
				pointer-events: none;
			}
		}
		@if $mode == normal {
			&--small {
				--ButtonTertiary--dashSpace: #{$var--ButtonTertiary--small--dashSpace};
				// font-weight: 400;
			}
		}
	}
}
